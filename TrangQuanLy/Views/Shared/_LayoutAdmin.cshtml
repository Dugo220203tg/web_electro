<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Web Electro Admin</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Favicon -->
    <link href="@Url.Content("~/Hinh/logo.png")" type="image/x-icon" rel="icon">
    <!-- SWEET ALERT-->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.3/dist/sweetalert2.min.css" rel="stylesheet">


    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Roboto:wght@500;700&display=swap" rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Libraries Stylesheet -->
    <link href="~/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <link href="~/lib/tempusdominus/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />

    <!-- Customized Bootstrap Stylesheet -->
    <link href="~/css/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="~/css/style.css" rel="stylesheet">
    <link href="~/css/mycss.css" rel="stylesheet" />
</head>
<body>
    @RenderBody()

    <!-- External Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/chart/chart.min.js"></script>
    <script src="~/lib/easing/easing.min.js"></script>
    <script src="~/lib/waypoints/waypoints.min.js"></script>
    <script src="~/lib/owlcarousel/owl.carousel.min.js"></script>
    <script src="~/lib/tempusdominus/js/moment.min.js"></script>
    <script src="~/lib/tempusdominus/js/moment-timezone.min.js"></script>
    <script src="~/lib/tempusdominus/js/tempusdominus-bootstrap-4.min.js"></script>

    <script src="~/js/main.js"></script>
    <script type="module" src="~/js/myjs.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    @* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    *@
    <!-- SWEET ALERT -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.3/dist/sweetalert2.all.min.js"></script>
    <script>
        $(function () {
            var message = '@Html.Raw(TempData["success"])'; // Ngăn mã hóa HTML
            var errorMessage = '@Html.Raw(TempData["error"])';

            if (message) { // Kiểm tra nếu có thông báo thành công
                Swal.fire({
                    icon: 'success',
                    title: 'Thông báo',
                    text: message
                });
            } else if (errorMessage) { // Kiểm tra nếu có thông báo lỗi
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: errorMessage
                });
            }
        });
    </script>
    <!-- --- -->
    <!-- Section for additional scripts -->
    @await RenderSectionAsync("Scripts", required: false)
    <script>
        function toggleCommentStatus(maDg, currentStatus) {
            const newStatus = currentStatus === 1 ? 0 : 1;
            const button = document.getElementById(`status-button-${maDg}`);
            const statusText = document.getElementById(`status-text-${maDg}`);

            $.ajax({
                type: "POST",
                url: 'https://localhost:7109/api/DanhGiaSp/UpdateTrangThai',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ MaDg: maDg, TrangThai: newStatus }),
                success: function (response) {
                    alert(response.message);

                    // Update button text and status after toggling
                    button.value = newStatus === 1 ? "Ẩn đánh giá" : "Hiển thị đánh giá";
                    button.setAttribute("onclick", `toggleCommentStatus('${maDg}', ${newStatus})`);

                    // Update the status text to reflect the new state
                    statusText.textContent = newStatus === 1 ? "Hiển Thị" : "Đã Ẩn";
                },
                error: function (xhr) {
                    alert("Có lỗi xảy ra: " + xhr.responseText);
                }
            });
        }

    </script>
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.8/css/dataTables.dataTables.css" />
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.datatables.net/2.1.8/js/dataTables.js"></script>
    <script>
        $(document).ready(function () {
            $('#myTable').DataTable({
                // Cấu hình ngôn ngữ tiếng Việt
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/vi.json',
                },
                // Tắt phân trang mặc định vì đã có phân trang từ server
                paging: false,
                // Cấu hình các tùy chọn khác
                ordering: true,
                searching: false,
                info: false,
                // Responsive
                responsive: true,
                // Tùy chỉnh style
                autoWidth: false,
                columnDefs: [
                    {
                        targets: -1, // cột cuối cùng (chức năng)
                        orderable: false, // không cho phép sắp xếp
                        searchable: false
                    }
                ],
                // Tùy chỉnh độ dài của bảng
                scrollY: '50vh',
                scrollCollapse: true,
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $(".testimonial-carousel").owlCarousel({
                items: 1, // Show only one product at a time
                loop: true, // Enable looping
                margin: 10,
                nav: true, // Enable navigation buttons
                dots: true, // Enable dots for pagination
                navText: ["<div class='owl-prev'>‹</div>", "<div class='owl-next'>›</div>"]
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const items = document.querySelectorAll('.testimonial-item');
            const dots = document.querySelectorAll('.owl-dot');
            let currentIndex = 0;
            const autoPlayDelay = 5000; // 5 seconds
            let autoPlayInterval;

            function showItem(index) {
                // Remove all classes first
                items.forEach(item => {
                    item.classList.remove('active', 'prev', 'next');
                });
                dots.forEach(dot => dot.classList.remove('active'));

                // Add appropriate classes
                items[currentIndex].classList.remove('active');
                items[currentIndex].classList.add('prev');

                currentIndex = index;

                items[currentIndex].classList.add('active');
                dots[currentIndex].classList.add('active');

                // Reset autoplay timer
                resetAutoPlay();
            }

            function nextItem() {
                const nextIndex = (currentIndex + 1) % items.length;
                showItem(nextIndex);
            }

            function resetAutoPlay() {
                clearInterval(autoPlayInterval);
                autoPlayInterval = setInterval(nextItem, autoPlayDelay);
            }

            // Add click event to each dot
            dots.forEach(dot => {
                dot.addEventListener('click', function () {
                    const index = parseInt(this.getAttribute('data-index'));
                    showItem(index);
                });
            });

            // Start autoplay
            resetAutoPlay();

            // Pause autoplay on hover
            const carousel = document.querySelector('.owl-carousel');
            carousel.addEventListener('mouseenter', () => clearInterval(autoPlayInterval));
            carousel.addEventListener('mouseleave', resetAutoPlay);
        });
    </script>
    @* JS phần hiển thị dropdown navbar
    @* <script>
    document.addEventListener("DOMContentLoaded", function () {
    // Add custom class to dropdown menus for better targeting
    document.querySelectorAll('.nav-item .dropdown-menu').forEach(menu => {
    menu.classList.add('custom-dropdown-menu');
    });

    // Handle dropdown toggle clicks
    const dropdownToggles = document.querySelectorAll('.nav-item .dropdown-toggle');
    dropdownToggles.forEach(toggle => {
    toggle.addEventListener('click', function (e) {
    e.preventDefault();
    e.stopPropagation();

    // Get the parent dropdown container
    const dropdownContainer = this.closest('.nav-item.dropdown');

    // Find the associated dropdown menu using data attribute
    const dropdownType = dropdownContainer.id.replace('-dropdown', '');
    const dropdownMenu = dropdownContainer.querySelector(`.dropdown-menu[data-dropdown="${dropdownType}"]`);

    if (dropdownMenu) {
    // Close all other dropdowns first
    document.querySelectorAll('.custom-dropdown-menu.show').forEach(menu => {
    if (menu !== dropdownMenu) {
    menu.classList.remove('show');
    }
    });

    // Toggle current dropdown
    dropdownMenu.classList.toggle('show');

    // Add active state to toggle button
    this.classList.toggle('active');
    }
    });
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', function (e) {
    if (!e.target.closest('.nav-item.dropdown')) {
    // Close all dropdowns
    document.querySelectorAll('.custom-dropdown-menu.show').forEach(menu => {
    menu.classList.remove('show');
    });

    // Remove active state from all toggle buttons
    document.querySelectorAll('.dropdown-toggle.active').forEach(toggle => {
    toggle.classList.remove('active');
    });
    }
    });
    });
    </script>*@
    <script>
        function removeRow(button) {
            const row = button.closest('tr');
            if (!row) return;

            // Find the index of the row
            const tbody = row.closest('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr.product-widget'));
            const index = rows.indexOf(row);

            // Add a hidden field to mark this item as deleted
            const form = row.closest('form');
            const hiddenDelete = document.createElement('input');
            hiddenDelete.type = 'hidden';
            hiddenDelete.name = `ChiTietHds[${index}].IsDeleted`;
            hiddenDelete.value = 'true';
            form.appendChild(hiddenDelete);

            // Hide the row
            row.style.display = 'none';

            // Update the total
            updateTotal();
        }

        function updateTotal() {
            let total = 0;
            const rows = document.querySelectorAll('tr.product-widget');
            const shippingFee = parseFloat(document.querySelector('input[name="PhiVanChuyen"]').value) || 0;

            rows.forEach(row => {
                if (row.style.display !== 'none') {
                    const quantity = parseFloat(row.querySelector('input[type="number"]').value) || 0;
                    const price = parseFloat(row.querySelector('input[type="text"]').value) || 0;
                    total += quantity * price;
                }
            });

            total += shippingFee;
            const formattedTotal = new Intl.NumberFormat('vi-VN').format(total);
            document.querySelector('.order-total').textContent = `${formattedTotal} VND`;
        }
    </script>
    <script>
function confirmDelete(maHH) {
    Swal.fire({
        title: 'Bạn có chắc chắn muốn xóa?',
        text: "Dữ liệu sẽ không thể khôi phục sau khi xóa!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Đồng ý',
        cancelButtonText: 'Hủy'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: '/HangHoa/DeleteProduct',
                type: 'POST',
                data: { MaHH: maHH },
                success: function(response) {
                    if (response.success) {
                        Swal.fire(
                            'Đã xóa!',
                            'Xóa dữ liệu thành công.',
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire(
                            'Lỗi!',
                            'Có lỗi xảy ra khi xóa dữ liệu.',
                            'error'
                        );
                    }
                },
                error: function(xhr, status, error) {
                    Swal.fire(
                        'Lỗi!',
                        'Có lỗi xảy ra khi xóa dữ liệu.',
                        'error'
                    );
                }
            });
        }
    });
}
</script>
</body>
</html>

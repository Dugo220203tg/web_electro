@using TrangQuanLy.Helpers;
@model PaginatedList<TrangQuanLy.Models.HangHoaVM>
@{
    ViewData["Title"] = "Index";
    Layout = "_Footer-Header";
}
<!-- Table Start -->
<div class="container-fluid pt-4 px-4">
    <div class="row g-4">
        <div class="col-12">
            <div class="bg-secondary rounded h-100 p-4">
                <div class="navbar">
                    <div class="nav-item dropdown top-nav">
                        <div class="me-3">
                            <label class="text-white me-2">Danh mục:</label>
                            <select class="form-select bg-dark text-white" id="categoryFilter"
                                    onchange="window.location.href='@Url.Action("Index")?categoryId=' + this.value +
'&sortOrder=@ViewBag.CurrentSort&pagesize=@ViewBag.PageSize'">
                                <option value="">Tất cả danh mục</option>
                                @foreach (var category in ViewBag.Categories)
                                {
                                    if (ViewBag.CategoryId == category.MaDanhMuc)
                                    {
                                        <option value="@category.MaDanhMuc" selected>@category.TenDanhMuc</option>
                                    }
                                    else
                                    {
                                        <option value="@category.MaDanhMuc">@category.TenDanhMuc</option>
                                    }
                                }
                            </select>
                        </div>

                        <h3 class="mb-4">Sản phẩm hàng hóa</h3>
                        <form class="ms-4" style="display: grid; grid-template-columns: 200px 50px; place-items: center;" asp-action="Search" asp-controller="HangHoa" method="get">
                            <div class="position-relative" style="width: 100%;">
                                <input class="form-control bg-dark border-0" type="search" placeholder="Search" name="query" value="@ViewBag.Query">
                                @if (!string.IsNullOrEmpty(ViewBag.Query))
                                {
                                    <button type="button" class="btn-close bg-light position-absolute" style="right: 10px; top: 50%; transform: translateY(-50%)"
                                            onclick="window.location.href='@Url.Action("Index", "HangHoa", new { categoryId = ViewBag.CategoryId, sortOrder = ViewBag.CurrentSort, pagesize = ViewBag.PageSize })'"></button>
                                }
                            </div>
                            <input type="hidden" name="categoryId" value="@ViewBag.CategoryId">
                            <input type="hidden" name="sortOrder" value="@ViewBag.CurrentSort">
                            <input type="hidden" name="pagesize" value="@ViewBag.PageSize">
                            <button type="submit" class="btn btn-square btn-outline-info m-2"><i class="fa fa-search"></i></button>
                        </form>
                        <div>
                            <a asp-action="Create" type="button" class="btn btn-outline-info m-2">Thêm sản phẩm</a>
                        </div>
                    </div>
                   
                </div>

                <!-- Filter and Sort Controls -->
                <div class="table-responsive">
                    <table class="table text-start align-middle mb-0 table-hover">
                        <thead>
                        <tr class="text-white">
                            <th scope="col">SKU</th>
                            <th scope="col">Sản phẩm</th>
                            <th scope="col">Danh mục</th>
                            <th scope="col">
                                <a href="@Url.Action("Index", new { categoryId = ViewBag.CategoryId, sortOrder = ViewBag.QuantitySortParm, pagesize = ViewBag.PageSize })"
                                   class="text-white">
                                    Số lượng @(ViewBag.CurrentSort == "quantity_desc" ? "↓" : "↑")
                                </a>
                            </th>
                            <th scope="col">
                                <a href="@Url.Action("Index", new { categoryId = ViewBag.CategoryId, sortOrder = ViewBag.PriceSortParm, pagesize = ViewBag.PageSize })"
                                   class="text-white">
                                    Giá @(ViewBag.CurrentSort == "price_desc" ? "↓" : "↑")
                                </a>
                            </th>
                            <th scope="col">Trạng thái</th>
                            <th scope="col">Chức năng</th>
                        </tr>
                        </thead>
                        @if (Model != null && Model.Any())
                        {
                            @await Html.PartialAsync("SanPham", Model)
                        }
                    </table>
                </div>

                <!-- Pagination Controls -->
                <div style="text-align:center; margin-top:20px;">
                    <ul class="pagination" style="display: inline-flex;">
                        @{
                            int pageIndex = Model.PageIndex;
                            int totalPages = Model.TotalPages;
                            int pageSizeValue = ViewBag.PageSize;
                            int startPage = ((pageIndex - 1) / 5) * 5 + 1;
                            int endPage = Math.Min(startPage + 4, totalPages);

                            // Determine the action name based on whether we're in search mode
                            string actionName = ViewBag.Query != null ? "Search" : "Index";

                            // Create route values dictionary for pagination links
                            var routeValues = new Dictionary<string, object> {
                        { "pagesize", pageSizeValue },
                        { "categoryId", ViewBag.CategoryId },
                        { "sortOrder", ViewBag.CurrentSort }
                        };

                            // Add query parameter if we're in search mode
                            if (ViewBag.Query != null)
                            {
                                routeValues.Add("query", ViewBag.Query);
                            }
                        }

                        @if (startPage > 1)
                        {
                            <li class="page_item">
                                @{
                                    var prevGroupValues = new Dictionary<string, object>(routeValues);
                                    prevGroupValues["page"] = startPage - 5;
                                }
                                <a class="page-link" href="@Url.Action(actionName, prevGroupValues)">&lt;&lt;</a>
                            </li>
                        }

                        @if (pageIndex > 1)
                        {
                            <li class="page-item">
                                @{
                                    var prevPageValues = new Dictionary<string, object>(routeValues);
                                    prevPageValues["page"] = Model.PageIndex - 1;
                                }
                                <a class="page-link" href="@Url.Action(actionName, prevPageValues)">&lt;</a>
                            </li>
                        }

                        @for (var i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(Model.PageIndex == i ? "active" : "")">
                                @{
                                    var pageValues = new Dictionary<string, object>(routeValues);
                                    pageValues["page"] = i;
                                }
                                <a class="page-link" href="@Url.Action(actionName, pageValues)">@i</a>
                            </li>
                        }

                        @if (pageIndex < totalPages)
                        {
                            <li class="page-item">
                                @{
                                    var nextPageValues = new Dictionary<string, object>(routeValues);
                                    nextPageValues["page"] = Model.PageIndex + 1;
                                }
                                <a class="page-link" href="@Url.Action(actionName, nextPageValues)">></a>
                            </li>
                        }

                        @if (endPage < totalPages)
                        {
                            <li class="page-item">
                                @{
                                    var nextGroupValues = new Dictionary<string, object>(routeValues);
                                    nextGroupValues["page"] = endPage + 1;
                                }
                                <a class="page-link" href="@Url.Action(actionName, nextGroupValues)">>></a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .top-nav {
        display: grid;
        grid-template-columns: 210px 255px 200px 165px;
        justify-content: space-between; 
        padding: 10px; 
        color: white;
        gap: 200px;
    }

</style>